local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()
local Window = Rayfield:CreateWindow({
   Name = "ProjectX",
   Icon = 0, -- Icon in Topbar. Can use Lucide Icons (string) or Roblox Image (number). 0 to use no icon (default).
   LoadingTitle = "ProjectX",
   LoadingSubtitle = "by Major",
   Theme = "Default", -- Check https://docs.sirius.menu/rayfield/configuration/themes

   DisableRayfieldPrompts = true,
   DisableBuildWarnings = true, -- Prevents Rayfield from warning when the script has a version mismatch with the interface

   ConfigurationSaving = {
      Enabled = true,
      FolderName = nil, -- Create a custom folder for your hub/game
      FileName = "Big Hub"
   },

   Discord = {
      Enabled = false, -- Prompt the user to join your Discord server if their executor supports it
      Invite = "noinvitelink", -- The Discord invite code, do not include discord.gg/. E.g. discord.gg/ ABCD would be ABCD
      RememberJoins = true -- Set this to false to make them join the discord every time they load it up
   },

   KeySystem = false, -- Set this to true to use our key system
   KeySettings = {
      Title = "Untitled",
      Subtitle = "Key System",
      Note = "No method of obtaining the key is provided", -- Use this to tell the user how to get a key
      FileName = "Key", -- It is recommended to use something unique as other scripts using Rayfield may overwrite your key file
      SaveKey = true, -- The user's key will be saved, but if you change the key, they will be unable to use your script
      GrabKeyFromSite = true, -- If this is true, set Key below to the RAW site you would like Rayfield to get the key from
      Key = {"https://raw.githubusercontent.com/timpan77/ProjectX/refs/heads/main/Key"} -- List of keys that will be accepted by the system, can be RAW file links (pastebin, github etc) or simple strings ("hello","key22")
   },
})

local Tab = Window:CreateTab("‚ö†Ô∏èTest", 4483362458) -- Title, Image
local Button = Tab:CreateButton({
   Name = "Buy eggs",
   Callback = function()
   repeat task.wait() until game:IsLoaded()
local LocalPlayer = game:GetService("Players").LocalPlayer
repeat task.wait() until not LocalPlayer.PlayerGui:FindFirstChild("__INTRO")

local Library = game:GetService("ReplicatedStorage"):WaitForChild("Library")
local Client = Library.Client

local Savemod = require(Client.Save)
local Network = require(Client.Network)
local RankCmds = require(Client.RankCmds)

local PurchasedSlots = Savemod.Get()["EggSlotsPurchased"]

while PurchasedSlots < RankCmds.GetMaxPurchasableEggSlots() do
    local EggSlotInfo = RankCmds.GetEggBundle(PurchasedSlots + 1)
    if Network.Invoke("EggHatchSlotsMachine_RequestPurchase", EggSlotInfo) then
        PurchasedSlots += 1
    end
    task.wait(0.1)
end
   end,
})

local Tab = Window:CreateTab("üí•Event", 4483362455) -- Title, Image
local running = false  -- Variabel f√∂r att h√•lla koll p√• om skriptet k√∂rs
local miningAmount = 100  -- Standardv√§rde f√∂r [3]
local machineTypes = {
    ["Ruby"] = 1,
    ["Emerald"] = 2,
    ["Amethyst"] = 3,
    ["Rainbow"] = 4,
    ["Quartz"] = 5,
    ["Topaz"] = 6,
    ["Onyx"] = 7,
    ["Huge Mining Monkey"] = 8
}
local machineType = machineTypes["Pro Machine"] -- Standardv√§rde f√∂r [2]

local function startMining()
    running = true
    while running do
        local args = {
            [1] = "MiningCraftMachine",
            [2] = machineType,
            [3] = miningAmount,
            [4] = {
                ["shiny"] = false,
                ["pt"] = 0
            }
        }
        
        game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("PetCraftingMachine_Craft"):InvokeServer(unpack(args))
        task.wait(0.001)
    end
end

local function stopMining()
    running = false
end

local Button = Tab:CreateButton({
   Name = "Craft",
   Callback = function()
       if running then
           stopMining()
       else
           startMining()
       end
   end,
})

local Slider = Tab:CreateSlider({
   Name = "Amount",
   Range = {0, 1000},
   Increment = 10,
   Suffix = "Units",
   CurrentValue = miningAmount,
   Flag = "Slider1",
   Callback = function(Value)
       miningAmount = Value
   end,
})

local Dropdown = Tab:CreateDropdown({
   Name = "Craft List",
   Options = {"Ruby", "Emerald", "Rainbow", "Quartz", "Topaz", "Onyx", "Huge Mining Monkey"},
   CurrentOption = {"Pro Machine"},
   MultipleOptions = false,
   Flag = "Dropdown1",
   Callback = function(Options)
       local selected = Options[1]
       if machineTypes[selected] then
           machineType = machineTypes[selected]
       end
   end,
})
